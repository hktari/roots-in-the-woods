### Type definitions saved at 2024-01-17T14:35:11.439Z ###

interface ContentfulEntry implements Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

type ContentfulAsset implements ContentfulReference & Node & RemoteFile @derivedTypes @dontInfer {
  contentful_id: String!
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI.
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: GatsbyImagePlaceholder

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP]

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1,
    2] for fluid. In this case, an image with a fluid layout and width = 400
    would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    jpegProgressive: Boolean = true
    resizingBehavior: ImageResizingBehavior
    cropFocus: ContentfulImageCropFocus

    """
    Desired corner radius in pixels. Results in an image with rounded corners.
    Pass `-1` for a full circle/ellipse.
    """
    cornerRadius: Int
    quality: Int = 50
  ): GatsbyImageData!
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  file: ContentfulAssetFile
  title: String
  description: String
  node_locale: String
  sys: ContentfulAssetSys
  url: String
  placeholderUrl: String
  mimeType: String
  filename: String
  width: Int
  height: Int
  size: Int
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageResizingBehavior {
  NO_CHANGE

  """
  Same as the default resizing, but adds padding so that the generated image has the specified dimensions.
  """
  PAD

  """Crop a part of the original image to match the specified size."""
  CROP

  """
  Crop the image to the specified dimensions, if the original image is smaller
  than these dimensions, then the image will be upscaled.
  """
  FILL

  """
  When used in association with the f parameter below, creates a thumbnail from the image based on a focus area.
  """
  THUMB

  """Scale the image regardless of the original aspect ratio."""
  SCALE
}

enum ContentfulImageCropFocus {
  TOP
  TOP_LEFT
  TOP_RIGHT
  BOTTOM
  BOTTOM_RIGHT
  BOTTOM_LEFT
  RIGHT
  LEFT
  FACE
  FACES
  CENTER
}

type ContentfulAssetFile @derivedTypes {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails @derivedTypes {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type ContentfulAssetSys {
  type: String
  revision: Int
}

type ContentfulPost implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  text: ContentfulPostText
  thumbnail: ContentfulAsset @link(by: "id", from: "thumbnail___NODE")
  gallery: [ContentfulAsset] @link(by: "id", from: "gallery___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPostSys
}

type ContentfulPostText {
  raw: String
}

type ContentfulPostSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPostSysContentType
}

type ContentfulPostSysContentType @derivedTypes {
  sys: ContentfulPostSysContentTypeSys
}

type ContentfulPostSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulPromoVideo implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  video: ContentfulAsset @link(by: "id", from: "video___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPromoVideoSys
}

type ContentfulPromoVideoSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPromoVideoSysContentType
}

type ContentfulPromoVideoSysContentType @derivedTypes {
  sys: ContentfulPromoVideoSysContentTypeSys
}

type ContentfulPromoVideoSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulActivity implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String!
  description: String!
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
}

type ContentfulMerch implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  price: Float
  title: String
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  description: contentfulMerchDescriptionTextNode @link(by: "id", from: "description___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulMerchSys
}

type contentfulMerchDescriptionTextNode implements Node @derivedTypes @childOf(types: ["ContentfulMerch"]) @dontInfer {
  description: String
  sys: contentfulMerchDescriptionTextNodeSys
}

type contentfulMerchDescriptionTextNodeSys {
  type: String
}

type ContentfulMerchSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulMerchSysContentType
}

type ContentfulMerchSysContentType @derivedTypes {
  sys: ContentfulMerchSysContentTypeSys
}

type ContentfulMerchSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulGallery implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  facebookAlbumId: String
  eventDate: Date @dateformat
  eventDateEnd: Date @dateformat
  banner: ContentfulAsset @link(by: "id", from: "banner___NODE")
  bannerMobile: ContentfulAsset @link(by: "id", from: "bannerMobile___NODE")
  lineup: ContentfulLineup @link(by: "id", from: "lineup___NODE")
  description: contentfulGalleryDescriptionTextNode @link(by: "id", from: "description___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulGallerySys
}

type ContentfulLineup implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  name: String
  url: Date @dateformat
  artists: [ContentfulArtist] @link(by: "id", from: "artists___NODE")
  gallery: [ContentfulGallery] @link(by: "id", from: "gallery___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulLineupSys
}

type ContentfulArtist implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  name: String
  countryOfOrigin: String
  socialMediaLink: String
  stage: String
  photo: ContentfulAsset @link(by: "id", from: "photo___NODE")
  lineup: [ContentfulLineup] @link(by: "id", from: "lineup___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulArtistSys
}

type ContentfulArtistSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulArtistSysContentType
}

type ContentfulArtistSysContentType @derivedTypes {
  sys: ContentfulArtistSysContentTypeSys
}

type ContentfulArtistSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulLineupSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulLineupSysContentType
}

type ContentfulLineupSysContentType @derivedTypes {
  sys: ContentfulLineupSysContentTypeSys
}

type ContentfulLineupSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type contentfulGalleryDescriptionTextNode implements Node @derivedTypes @childOf(types: ["ContentfulGallery"]) @dontInfer {
  description: String
  sys: contentfulGalleryDescriptionTextNodeSys
}

type contentfulGalleryDescriptionTextNodeSys {
  type: String
}

type ContentfulGallerySys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulGallerySysContentType
}

type ContentfulGallerySysContentType @derivedTypes {
  sys: ContentfulGallerySysContentTypeSys
}

type ContentfulGallerySysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type facebook implements Node @derivedTypes @dontInfer {
  data: [facebookData]
  paging: facebookPaging
}

type facebookData @derivedTypes {
  id: String
  name: String
  photos: facebookDataPhotos
}

type facebookDataPhotos @derivedTypes {
  data: [facebookDataPhotosData]
  paging: facebookDataPhotosPaging
}

type facebookDataPhotosData @derivedTypes {
  webp_images: [facebookDataPhotosDataWebp_images]
  id: String
}

type facebookDataPhotosDataWebp_images {
  height: Int
  source: String
  width: Int
}

type facebookDataPhotosPaging @derivedTypes {
  cursors: facebookDataPhotosPagingCursors
  next: String
}

type facebookDataPhotosPagingCursors {
  before: String
  after: String
}

type facebookPaging @derivedTypes {
  cursors: facebookPagingCursors
}

type facebookPagingCursors {
  before: String
  after: String
}

type ContentfulContentType implements Node @derivedTypes @dontInfer {
  name: String
  displayField: String
  description: String
  sys: ContentfulContentTypeSys
}

type ContentfulContentTypeSys {
  type: String
}